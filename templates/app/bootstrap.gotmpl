package app

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net/http"
	_ "net/http/pprof" // 导入 pprof
	"os"
	"os/signal" // 导入 sync 包
	"strings"
	"syscall"
	"time"

	"{{.ProjectName}}/app/command"
	"{{.ProjectName}}/app/crontab"
	"{{.ProjectName}}/app/hooks"
	"{{.ProjectName}}/internal/taurus"
)

// ANSI escape sequences define colors
const (
	Reset  = "\033[0m"
	Red    = "\033[31m"
	Green  = "\033[32m"
	Yellow = "\033[33m"
	Blue   = "\033[34m"
	Cyan   = "\033[36m"
)

// DefaultHost and DefaultPort are the default server address and port
var (
	env        = ".env.local"
	configPath = "./config"
	scriptMode = false
	Core       *Injector
	cleanups   []func()
)

func runCommand() {
	// 判断命令行是否是脚本命令， 如果是则启动脚本命令
	// 如果是脚本命令，必须使用命令行参数 --script 指定脚本命令
	// 如果命令行参数 --script 不存在，则启动http服务
	if scriptMode {
		// 过滤掉应用级别的参数，只传递真正的命令参数给命令管理器
		args := os.Args[1:] // 跳过程序名
		filteredArgs := make([]string, 0)

		for i := 0; i < len(args); i++ {
			arg := args[i]

			// 跳过应用级别的参数
			switch arg {
			case "--script", "-script":
				continue
			case "--env", "-e":
				// 跳过 --env 参数及其值
				if i+1 < len(args) && !strings.HasPrefix(args[i+1], "-") {
					i++ // 跳过下一个参数（env的值）
				}
				continue
			case "--config", "-c":
				// 跳过 --config 参数及其值
				if i+1 < len(args) && !strings.HasPrefix(args[i+1], "-") {
					i++ // 跳过下一个参数（config的值）
				}
				continue
			}

			filteredArgs = append(filteredArgs, arg)
		}

		// 重新设置 os.Args，只包含过滤后的参数
		os.Args = append([]string{os.Args[0]}, filteredArgs...)

		err := taurus.Container.Command.Run()
		if err != nil {
			fmt.Printf("%sCommand run failed: %v %s\n", Red, err, Reset)
			os.Exit(1)
		}

		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()
		gracefulCleanup(ctx)
		os.Exit(0)
	}
}

func Run() {

	// 启动脚本命令
	runCommand()

	// 启动 pprof 服务
	runPprofServer()

	// use errChan to receive http server startup error
	errChan := make(chan error, 1)
	taurus.Container.Http.Start(errChan)

	// Block until a signal is received or an error is returned.
	// If an error is returned, it is a fatal error and the program will exit.
	if err := signalWaiter(errChan); err != nil {
		log.Fatalf("%sServer startup failed: %v %s\n", Red, err, Reset)
	}

	// If signalWaiter returns nil, it means the server is running. But received a signal, so we need to shutdown the server.
	// Create a deadline to wait for, 5 seconds or cancel() are all called ctx.Done()
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Attempt graceful shutdown
	if err := taurus.Container.Http.Shutdown(ctx); err != nil {
		log.Printf("%sServer forced to shutdown: %v %s\n", Red, err, Reset)
	}

	log.Printf("%s🔗 -> Server shutdown successfully. %s\n", Green, Reset)
	gracefulCleanup(ctx)
}

// signalWaiter waits for a signal or an error, then return
func signalWaiter(errCh chan error) error {
	signalToNotify := []os.Signal{syscall.SIGINT, syscall.SIGHUP, syscall.SIGTERM}
	if signal.Ignored(syscall.SIGHUP) {
		signalToNotify = []os.Signal{syscall.SIGINT, syscall.SIGTERM}
	}

	signals := make(chan os.Signal, 1)
	signal.Notify(signals, signalToNotify...)

	log.Printf("%s🔗 -> Waiting for signals: %v %s\n", Yellow, signalToNotify, Reset)

	// Block until a signal is received or an error is returned
	select {
	case sig := <-signals:
		switch sig {
		case syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM:
			log.Printf("%s🔗 -> Received signal: %s, starting graceful shutdown... %s\n", Yellow, sig, Reset)
			signal.Stop(signals) // 停止接收新的信号
			return nil
		}
	case err := <-errCh:
		log.Printf("%s🔗 -> Received error: %v, starting shutdown... %s\n", Red, err, Reset)
		return err
	}

	return nil
}

// gracefulCleanup is called when the server is shutting down. we can do some cleanup work here.
func gracefulCleanup(ctx context.Context) {

	log.Printf("%s🔗 -> Waiting for all requests to be processed... %s\n", Yellow, Reset)
	done := make(chan struct{})

	go func() {
		log.Printf("%s🔗 -> Running cleanup functions... %s\n", Yellow, Reset)
		for _, cleanup := range cleanups {
			cleanup()
		}
		log.Printf("%s🔗 -> All cleanup functions completed %s\n", Green, Reset)
		close(done)
	}()

	select {
	case <-done:
		log.Printf("%s🔗 -> Cleanup completed successfully. %s\n", Green, Reset)
	case <-ctx.Done():
		// If context timeout has passed and the server has not stopped
		log.Printf("%s🔗 -> Cleanup timeout reached, forcing stop. %s\n", Red, Reset)
	}
}

// init is automatically called before the main function
// --env .env.local --config ./config
func init() {
	// custom usage
	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "\n%s\n", Cyan+"==================== Usage ===================="+Reset)
		fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
		fmt.Fprintf(os.Stderr, "  %s-e, --env <file>%s      Specify the environment file (default \".env.local\")\n", Green, Reset)
		fmt.Fprintf(os.Stderr, "  %s-c, --config <path>%s   Specify the configuration file or directory (default \"config\")\n", Green, Reset)
		fmt.Fprintf(os.Stderr, "  %s--script%s          	Run in script mode\n", Green, Reset)
		fmt.Fprintf(os.Stderr, "  %s-h, --help%s            Show this help message\n", Green, Reset)
		fmt.Fprintf(os.Stderr, "%s\n", Cyan+"==============================================="+Reset)
	}

	// set command line arguments and their aliases
	flag.StringVar(&env, "env", ".env.local", "Environment file")
	flag.StringVar(&env, "e", ".env.local", "Environment file (alias)")
	flag.StringVar(&configPath, "config", "config", "Path to the configuration file or directory")
	flag.StringVar(&configPath, "c", "config", "Path to the configuration file or directory (alias)")

	// 添加脚本模式参数
	flag.BoolVar(&scriptMode, "script", false, "Run in script mode")

	// parse command line arguments
	flag.Parse()

	// initialize all modules.
	// the env file is not needed, because the makefile has already written the environment variables into the env file, but for the sake of rigor, we still pass the env file to the initialize function
	cleanup, err := taurus.BuildComponents(configPath, env)
	if err != nil {
		log.Fatal(err)
	}
	cleanups = append(cleanups, cleanup)

	// initialize project modules
	Core, cleanup, err = buildInjector()

	if err != nil {
		log.Fatal(err)
	}
	cleanups = append(cleanups, cleanup)

	// 启动 hooks
	if err := hooks.StartHook(); err != nil {
		log.Printf("%s🔗 -> Hooks start failed: %v %s\n", Red, err, Reset)
	}

	// 启动定时任务
	if err := crontab.StartTasks(); err != nil {
		log.Printf("%s🔗 -> Cron tasks start failed: %v %s\n", Red, err, Reset)
	}

	// 启动脚本命令
	command.StartCommand()
}

func runPprofServer() {
	// 启动 pprof 服务
	if taurus.Container.Config.GetBool("pprof_enabled") {
		server := &http.Server{
			Addr:    "localhost:6060",
			Handler: nil,
		}

		go func() {
			log.Printf("%s🔗 -> Starting pprof server on :6060 %s\n", Yellow, Reset)
			if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
				log.Printf("%s🔗 -> pprof server error: %v %s\n", Red, err, Reset)
			}
		}()

		// 添加pprof服务器的清理函数
		cleanups = append(cleanups, func() {
			log.Printf("%s🔗 -> Shutting down pprof server... %s\n", Yellow, Reset)
			ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)
			defer cancel()

			if err := server.Shutdown(ctx); err != nil {
				log.Printf("%s🔗 -> pprof server forced to shutdown: %v %s\n", Red, err, Reset)
			} else {
				log.Printf("%s🔗 -> pprof server shutdown successfully %s\n", Green, Reset)
			}
		})
	}

	/*
		===============================================================================
		📊 PProf 性能分析访问指南
		===============================================================================

		🌐 基础访问地址: http://localhost:6060/debug/pprof/

		📈 常用性能分析端点:

		1. 🧠 内存分析
		   - 堆内存使用: http://localhost:6060/debug/pprof/heap
		   - 内存分配: http://localhost:6060/debug/pprof/allocs
		   - 内存分析(带调试): http://localhost:6060/debug/pprof/heap?debug=1

		2. ⚡ CPU 分析
		   - CPU Profile (30秒): http://localhost:6060/debug/pprof/profile
		   - CPU Profile (自定义时长): http://localhost:6060/debug/pprof/profile?seconds=60

		3. 🔄 Goroutine 分析
		   - Goroutine 概览: http://localhost:6060/debug/pprof/goroutine
		   - 完整堆栈转储: http://localhost:6060/debug/pprof/goroutine?debug=2
		   - Goroutine 调试信息: http://localhost:6060/debug/pprof/goroutine?debug=1

		4. 🔒 阻塞和锁分析
		   - 阻塞分析: http://localhost:6060/debug/pprof/block
		   - 互斥锁分析: http://localhost:6060/debug/pprof/mutex

		5. 🧵 线程分析
		   - 线程创建: http://localhost:6060/debug/pprof/threadcreate

		6. 📊 追踪分析
		   - 执行追踪: http://localhost:6060/debug/pprof/trace

		7. 🔧 调试工具
		   - 命令行参数: http://localhost:6060/debug/pprof/cmdline
		   - 符号表: http://localhost:6060/debug/pprof/symbol

		💡 使用技巧:

		1. 内存泄漏检测:
		   curl http://localhost:6060/debug/pprof/heap > heap.prof
		   go tool pprof heap.prof
		   (pprof) top
		   (pprof) list <function_name>

		2. CPU 性能分析:
		   curl http://localhost:6060/debug/pprof/profile > cpu.prof
		   go tool pprof cpu.prof
		   (pprof) top
		   (pprof) web

		3. Goroutine 泄漏检测:
		   curl http://localhost:6060/debug/pprof/goroutine?debug=2 > goroutine.txt
		   # 分析 goroutine 数量和堆栈

		4. 实时监控:
		   watch -n 5 'curl -s http://localhost:6060/debug/pprof/ | grep -E "goroutine|heap"'

		5. 生成火焰图:
		   go tool pprof -http=:8081 http://localhost:6060/debug/pprof/profile

		⚠️  注意事项:
		- 生产环境谨慎使用，可能影响性能
		- CPU profile 会暂停程序执行
		- 大量 goroutine 时 debug=2 可能很慢
		- 建议在测试环境进行详细分析

		===============================================================================
	*/
}
