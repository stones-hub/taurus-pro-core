//lint:file-ignore ST1001 dot imports are allowed here

package main

import (
	"fmt"
	"log"
	"net/http"
	"time"

	"{{.ProjectName}}/app"
	"{{.ProjectName}}/internal/taurus"

	tmid "{{.ProjectName}}/pkg/middleware"

	"github.com/stones-hub/taurus-pro-http/pkg/middleware"
	"github.com/stones-hub/taurus-pro-http/pkg/router"
)

func main() {
	setGlobalTimezone()
	pprof()
	userRoutes()
	authRoutes()

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/home",
		Handler: http.HandlerFunc(app.Core.IndexController.Home),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path: "/health",
		Handler: http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("health"))
		}),
	})

	app.Run()
}

// pprof 路由, 用于测试内存泄漏
func pprof() {
	// 添加内存测试路由
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/memory/allocate",
		Handler: http.HandlerFunc(app.Core.MemoryController.AllocateMemory),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/memory/leak",
		Handler: http.HandlerFunc(app.Core.MemoryController.SimulateMemoryLeak),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/memory/free",
		Handler: http.HandlerFunc(app.Core.MemoryController.FreeMemory),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})
}



// setGlobalTimezone 设置全局时区为上海时区
func setGlobalTimezone() {
	// 加载上海时区
	shanghaiLoc, err := time.LoadLocation("Asia/Shanghai")
	if err != nil {
		log.Printf("⚠️  加载上海时区失败: %v，将使用系统默认时区", err)
		return
	}

	// 设置全局时区
	time.Local = shanghaiLoc

	log.Printf("✅ 全局时区已设置为上海时区 (Asia/Shanghai)")
	log.Printf("📅 当前时间: %s", time.Now().Format("2006-01-02 15:04:05 MST"))
}


// userRoutes 注册所有User Controller的路由
func userRoutes() {
	// 基础CRUD操作
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/create",
		Handler: http.HandlerFunc(app.Core.UserController.CreateUser),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/get",
		Handler: http.HandlerFunc(app.Core.UserController.GetUserByID),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/getByName",
		Handler: http.HandlerFunc(app.Core.UserController.GetUserByName),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/updateName",
		Handler: http.HandlerFunc(app.Core.UserController.UpdateUserName),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/updatePassword",
		Handler: http.HandlerFunc(app.Core.UserController.UpdateUserPassword),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/delete",
		Handler: http.HandlerFunc(app.Core.UserController.DeleteUser),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	// 查询操作
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/all",
		Handler: http.HandlerFunc(app.Core.UserController.GetAllUsers),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/page",
		Handler: http.HandlerFunc(app.Core.UserController.GetUsersByPage),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/search",
		Handler: http.HandlerFunc(app.Core.UserController.SearchUsers),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/count",
		Handler: http.HandlerFunc(app.Core.UserController.GetUserCount),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/stats",
		Handler: http.HandlerFunc(app.Core.UserController.GetUserStatistics),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	// 高级功能
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/like",
		Handler: http.HandlerFunc(app.Core.UserController.GetUsersByNameLike),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/recent",
		Handler: http.HandlerFunc(app.Core.UserController.GetRecentUsers),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/exists",
		Handler: http.HandlerFunc(app.Core.UserController.UserExists),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/existsByName",
		Handler: http.HandlerFunc(app.Core.UserController.UserExistsByName),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	// 批量操作
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/createBatch",
		Handler: http.HandlerFunc(app.Core.UserController.CreateUsersBatch),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/deleteBatch",
		Handler: http.HandlerFunc(app.Core.UserController.DeleteUsersBatch),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	// SQL操作
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/executeSQL",
		Handler: http.HandlerFunc(app.Core.UserController.ExecuteSQL),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/querySQL",
		Handler: http.HandlerFunc(app.Core.UserController.QueryUsersBySQL),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	// 业务逻辑
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/user/createIfNotExists",
		Handler: http.HandlerFunc(app.Core.UserController.CreateUserIfNotExists),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})
}

// authRoutes 注册所有认证相关的路由
func authRoutes() {
	// 基础认证路由（不需要JWT验证）
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/login",
		Handler: http.HandlerFunc(app.Core.AuthController.Login),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
			// 添加限流中间件测试
			tmid.RateLimitMiddleware(),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/register",
		Handler: http.HandlerFunc(app.Core.AuthController.Register),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
			// 添加限流中间件测试
			tmid.RateLimitMiddleware(),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/logout",
		Handler: http.HandlerFunc(app.Core.AuthController.Logout),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/refresh",
		Handler: http.HandlerFunc(app.Core.AuthController.RefreshToken),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
		},
	})

	// 测试限流中间件的路由
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/test/ratelimit",
		Handler: http.HandlerFunc(app.Core.AuthController.TestRateLimit),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
			// 添加限流中间件测试
			tmid.RateLimitMiddleware(),
		},
	})

	// 需要JWT验证的路由
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/profile",
		Handler: http.HandlerFunc(app.Core.AuthController.GetProfile),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
			// 添加JWT中间件验证
			tmid.JWTMiddleware(),
		},
	})

	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/profile/update",
		Handler: http.HandlerFunc(app.Core.AuthController.UpdateProfile),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
			// 添加JWT中间件验证
			tmid.JWTMiddleware(),
		},
	})

	// 测试JWT中间件的路由
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/test/jwt",
		Handler: http.HandlerFunc(app.Core.AuthController.TestJWTMiddleware),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
			// 添加JWT中间件验证
			tmid.JWTMiddleware(),
		},
	})

	// 测试完整认证流程的路由
	taurus.Container.Http.AddRouter(router.Router{
		Path:    "/auth/test/protected",
		Handler: http.HandlerFunc(app.Core.AuthController.TestProtectedEndpoint),
		Middleware: []router.MiddlewareFunc{
			middleware.RecoveryMiddleware(func(err any, stack string) {
				fmt.Printf("Error: %v\nStack: %s\n", err, stack)
			}),
			// 添加JWT中间件验证
			tmid.JWTMiddleware(),
		},
	})
}
